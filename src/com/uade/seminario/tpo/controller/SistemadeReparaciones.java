package com.uade.seminario.tpo.controller;
import java.sql.Date;
import java.util.Vector;

import com.uade.seminario.tpo.view.ClienteView;
import com.uade.seminario.tpo.view.ModeloView;
import com.uade.seminario.tpo.view.OrdenReparacionView;
import com.uade.seminario.tpo.view.PiezaView;
import com.uade.seminario.tpo.view.TareaReparacionView;

import com.uade.seminario.tpo.exceptions.ExceptionExisteCliente;
import com.uade.seminario.tpo.exceptions.ExceptionExisteModelo;
import com.uade.seminario.tpo.exceptions.ExceptionModeloInactivo;
import com.uade.seminario.tpo.exceptions.ExceptionModeloPerteneceEquipo;
import com.uade.seminario.tpo.exceptions.ExceptionNoExisteModelo;
import com.uade.seminario.tpo.exceptions.ExceptionNoHayStock;

import com.uade.seminario.tpo.model.Cliente;
import com.uade.seminario.tpo.model.Empleado;
import com.uade.seminario.tpo.model.Equipo;
import com.uade.seminario.tpo.model.Garantia;
import com.uade.seminario.tpo.model.Modelo;
import com.uade.seminario.tpo.model.OrdenReparacion;
import com.uade.seminario.tpo.model.Pieza;
import com.uade.seminario.tpo.model.Remito;
import com.uade.seminario.tpo.model.Reporte;
import com.uade.seminario.tpo.model.TareaReparacion;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Sistema de Reparaciones.java
//  @ Date : 29/07/2013
//  @ Author : 
//
//




public class SistemadeReparaciones {
	private static SistemadeReparaciones instancia;
	private Vector<Remito> remitos;
	private Vector<Garantia> garantias;
	private Vector<Modelo> modelos;
	private Vector<Pieza> piezas;
	private Vector<OrdenReparacion> ordReparacion;
	private Vector<Equipo> equipos;
	private Vector<Cliente> clientes;
	private Vector<Empleado> empleados;
	private Vector<Reporte> reportes;
	
	private SistemadeReparaciones(){
		this.remitos=new Vector<Remito>();
		this.garantias=new Vector<Garantia>();
		this.modelos=new Vector<Modelo>();
		this.piezas=new Vector<Pieza>();
		this.ordReparacion=new Vector<OrdenReparacion>();
		this.empleados=new Vector<Empleado>();
		this.equipos=new Vector<Equipo>();
		this.clientes= new Vector<Cliente>();
		this.reportes=new Vector<Reporte>();
	}
	
	public static SistemadeReparaciones getInstancia(){
		if(instancia==null)
			instancia=new SistemadeReparaciones();
		return instancia;
	}
	
	public void altaModelo(String nombre,int codigo,String descripcion){   //LAS PIEZAS SE LAS MOSTRAMOS POR PANTALLA ANTES DE CREAR EL MODELO?
		Modelo modelo=buscarModelo(codigo);
		if(modelo==null){
			modelo=new Modelo(nombre,descripcion,codigo);
			modelos.add(modelo);
		}
		else
			throw new ExceptionExisteModelo(codigo);
	}
	
	public void modificarModelo(int codigo, String nombre, String descripcion){							
		Modelo modelo=this.buscarModelo(codigo);
		if(modelo!=null && modelo.modeloActivo()){
			modelo.setDescripcion(descripcion);
			modelo.setNombre(nombre);
		}
		else
			throw new ExceptionNoExisteModelo(codigo);
		
	}
	
	public void bajaModelo(int codigo) throws ExceptionModeloInactivo{
		Modelo modelo=this.buscarModelo(codigo);
		if(modelo!=null && modelo.modeloActivo()){
			if(!existeElModeloEnUnEquipo(codigo)){
				modelo.darBajaModelo();
			}
			else{
				throw new ExceptionModeloPerteneceEquipo(codigo);
			}
		}
		else{
			if(modelo==null)
				throw new ExceptionNoExisteModelo(codigo);
			else
				throw new ExceptionModeloInactivo(codigo);
			
		}
		
	}
	
	public boolean existeElModeloEnUnEquipo(int codigo) {
		for (Equipo equipo : equipos) {
			if(equipo.getModelo().getNroModelo()==codigo)
				return true;
		}
		return false;
	}

	public Modelo buscarModelo(int codigo) {
		for (Modelo modelo : modelos) {
			if(modelo.getNroModelo()==codigo){
				return modelo;
			}
		}
		return null;
	}
	
	
	public void altaOrdenReparacion(int nroSerieEquipo){
		Equipo equipo=buscarEquipo(nroSerieEquipo);
		OrdenReparacion or=BuscarEquipoxOrdenRep(nroSerieEquipo);
		if(equipo!=null && or==null){
			int nroOrden=generarNroOrden();
			OrdenReparacion orden=new OrdenReparacion(nroOrden);
			orden.setEquipo(equipo);
			//ACA AGREGAR LAS TAREAS ?¡?¡??¡??¡?
			orden.setEstado("A reparar");
		}
		
	}

	public void modificarOrdenReparacion(int nroReparacion){
		OrdenReparacion orden=buscarOrdenReparacion(nroReparacion);
		
		
	}
	
	public OrdenReparacion buscarOrdenReparacion(int nroReparacion) {
		// TODO Auto-generated method stub
		return null;
	}

	public int generarNroOrden() {
		// TODO Auto-generated method stub
		return 0;
	}

	private OrdenReparacion BuscarEquipoxOrdenRep(int nroSerieEquipo) {
		for (OrdenReparacion or : ordReparacion) {
			if(or.esTuEquipo(nroSerieEquipo) && or.estadoAReparar()){
				return or;
			}
		}
		return null;
	}

	public Equipo buscarEquipo(int nroSerieEquipo) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public OrdenReparacionView misReparaciones(int legajo){
		Empleado empleado=buscarEmpleado(legajo);
		if(empleado!=null){
			if(!empleado.hayOrdenReparacion()){
				OrdenReparacion orden= this.buscarOrdenReparacionPrioridad();
				empleado.addAReparar(orden);
				return orden.getView();
			}
			else
				return empleado.getaReparar().get(0).getView();
		}
		else
			return null;		
	}

	public OrdenReparacion buscarOrdenReparacionPrioridad() {
		// TODO Auto-generated method stub
		return null;
	}

	private Empleado buscarEmpleado(int legajo) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public TareaReparacion crearTareaReparacion(String descripcion,Vector<Pieza> piezas){     //VER COMO SERIA LA CONFIRMACION
		int nroTarea=generarNroTarea();
		boolean stock=true;
		for (Pieza pieza : piezas) {
			if(!pieza.hayStock()){
				stock=false;
				throw new ExceptionNoHayStock(pieza.getNroPieza());
			}
		}
		if(stock){
			TareaReparacion tarea=new TareaReparacion(nroTarea,descripcion);
			tarea.setPiezas(piezas);
			tarea.setEstado("Activa");
			return tarea;
		}
		else
			return null;
			
	}
	
	public void modificarTareaReparacion(int nroReparacion){
		TareaReparacion tarea=buscarTareaReparacion(nroReparacion);
		
	}
	
	public void bajaTareaReparacion(int nroReparacion){
		TareaReparacion tarea=buscarTareaReparacion(nroReparacion);
		if(tarea!=null && tarea.estaActiva()){
			tarea.setEstado("Inactiva");
		}
		
	}
	
	public Vector<TareaReparacionView> listarTareasReparacion(int nroReparacion){
		OrdenReparacion orden=buscarOrdenReparacion(nroReparacion);
		if(orden!=null){
			return orden.listarTareasView();
		}
		return null;
		
	}
	
	public void emitirReportePiezas(Date desde,Date hasta){
		Vector<OrdenReparacion> ordenes=buscarOrdenesReporte(desde,hasta);
		generarListaPiezas(ordenes);
	}

	public void generarListaPiezas(Vector<OrdenReparacion> ordenes) {
		for (OrdenReparacion ordenReparacion : ordenes) {
			ordenReparacion.listaPiezas();
		}
	}

	public Vector<OrdenReparacion> buscarOrdenesReporte(Date desde, Date hasta) {
		// TODO Auto-generated method stub
		return null;
	}

	private TareaReparacion buscarTareaReparacion(int nroReparacion) {
		// TODO Auto-generated method stub
		return null;
	}

	private int generarNroTarea() {
		// TODO Auto-generated method stub
		return 0;
	}

	public void altaCliente(int nroDoc, String tipoDoc, String nombre, String apellido,
			String direccion, String mail, String fechaNac, String tel) {
		Cliente cliente=buscarCliente(nroDoc,tipoDoc);
		if(cliente==null){
			cliente=new Cliente(nroDoc,tipoDoc,nombre,apellido,direccion,mail,fechaNac,tel);
			clientes.add(cliente);
			cliente.persistite();
		}
		else
			throw new ExceptionExisteCliente(nroDoc);
		
	}

	private Cliente buscarCliente(int nroDoc, String tipoDoc) {
		
		return null;
	}

	public ClienteView obtenerClienteView(int nroDoc,String tipoDoc) {
		Cliente cliente=buscarCliente(nroDoc,tipoDoc);
		if(cliente!=null)
			return cliente.getView();
		else
			return null;
	}

	public void modificarCliente(int nroDoc, String tipoDoc,String nombre1, String dir, String tel,
			String mail) {
		Cliente cliente=buscarCliente(nroDoc,tipoDoc);
		cliente.setNombre(nombre1);
		cliente.setDireccion(dir);
		cliente.setTelefono(tel);
		cliente.setEmail(mail);		
	}

	public void altaPieza(String nombre, int codPieza, int codModelo, String descripcion) {
		Modelo modelo=buscarModelo(codModelo);
		Pieza pieza=buscarPieza(codPieza);
		if(modelo!=null && pieza==null){
			pieza=new Pieza(codPieza,nombre,descripcion);
			modelo.addPieza(pieza);
			piezas.add(pieza);
		}
		
	}

	private Pieza buscarPieza(int codPieza) {
		for (Pieza pieza : piezas) {
			if(pieza.getNroPieza()==codPieza)
				return pieza;
		}
		return null;
	}

	public PiezaView buscarPiezaView(int codigoPieza) {
		
		return null;
	}

	public void modificarPieza(String nombre, int codPieza,
			String descripcion) {
		Pieza pieza=buscarPieza(codPieza);
		if(pieza!=null){
			pieza.setNombrePieza(nombre);
			pieza.setDescripcion(descripcion);
		}
		
	}

	public void BajaPieza(int codigoPieza) {
		Pieza pieza=buscarPieza(codigoPieza);
		if(pieza!=null && !hayModelosConPieza(codigoPieza)){
			pieza.darBajaPieza();
		}
		
		
	}

	private boolean hayModelosConPieza(int codigoPieza) {
		// TODO Auto-generated method stub
		return false;
	}

	public ModeloView buscarModeloView(int codModelo) {
		Modelo modelo=buscarModelo(codModelo);
		if(modelo!=null)
			return modelo.getView();
		else
			return null;
	}

	public Vector<PiezaView> buscarPiezaXModeloView(int codModelo) {
		 Vector<PiezaView> piezasview=new Vector<PiezaView>();
		 Modelo modelo=buscarModelo(codModelo);
		 if(modelo!=null){
			 Vector<Pieza> piezas=modelo.getPiezas();
			 for (Pieza p : piezas) {
				piezasview.add(p.getView());				
			}
		 }
		 return piezasview;
	}

	public void confirmarModelo(int codigo) {
		Modelo modelo= buscarModelo(codigo);
		modelo.activar();
		
	}

	
}
